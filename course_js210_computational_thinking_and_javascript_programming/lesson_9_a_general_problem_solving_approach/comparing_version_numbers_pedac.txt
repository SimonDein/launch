While version numbers often appear to be decimal numbers, they are, in fact, a convenient notation for a more complicated number system. The following are all legal version numbers:

1
1.0
1.2
3.2.3
3.0.0
4.2.3.0

Write a function that takes any two version numbers in this format and compares them, with the result of this comparison showing whether the first is less than, equal to, or greater than the second version:

If version1 > version2, we should return 1.
If version1 < version2, we should return -1.
If version1 === version2, we should return 0.
If either version number contains characters other than digits and the . character, we should return null.
Here is an example of version number ordering:

0.1 < 1 = 1.0 < 1.1 < 1.2 = 1.2.0.0 < 1.18.2 < 13.37


Understanding the Problem:
Input:
  2 arguments
    - version numbers as strings

Output:  
  - either arg is invalid => null
    - chars other than . or digits are invalid
    - more than one . in between sections
    - version doesn't start and end with a number

  - vers1 > vers2 => 1
  - arg1 === arg2 => 0
  - arg1 < arg2   => -1


Rules of Comparison:
  Example: 0.1 < 1 = 1.0 < 1.1.3 < 1.1.4 < 1.2 = 1.2.0.0 < 1.18.2 < 13.37

  If a version has more sections than the other, we can append .0 to the shorter version till they have the same number of sections
  
  Starting from the front; look at the same section of the version number from each arg
    - if the number is the same
      - continue
    - if the number from arg1 > arg2 return 1
    - if the number from arg1 < arg2 return -1
    
    - if no return was made; we know the versions are the same and return 0


Examples / test cases:
compareVersions('0.1', '0.11') => -1
compareVersions('0.1', '0.1') => 0
compareVersions('0.2', '0.1') => 1
compareVersions('1.3.5', '1.3.4') => 1
compareVersions('1.3.5', '1.13.4') => -1
compareVersions('12.3.5', '1.13.4') => 1

Egde cases:
compareVersions('.5', '1') => null
compareVersions('5.', '1') => null
compareVersions('1..5', '1.5') => null
compareVersions('1.0.0', '1.0') => 0
compareVersions('1.0', '1.0.5') => -1

Algorithm:
Return null if either version number is invalid
  - check if chars other than digits or .
  - check if versions doesn't start or end with numbers
  - check if more than one . between version numbers
Pad either argument if one has fewer sections than the other
  - split the arguments into arrays containing each sub sections
  - pad to equal length
    - shortest, longest = arg1.length > arg2.length ? [arg2, arg1] : [arg1, arg2]
    - difference = longest.length - shortest.length
    - loop difference times
      shortest.push('.0')
Compare versions
  - for each section in arg1
    - if arg1 > arg2
      - return 1
    - else if arg1 < arg2
      - return -1

  - return 0