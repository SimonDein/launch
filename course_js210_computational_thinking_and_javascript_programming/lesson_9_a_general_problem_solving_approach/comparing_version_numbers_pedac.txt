While version numbers often appear to be decimal numbers, they are, in fact, a convenient notation for a more complicated number system. The following are all legal version numbers:

1
1.0
1.2
3.2.3
3.0.0
4.2.3.0

Write a function that takes any two version numbers in this format and compares them, with the result of this comparison showing whether the first is less than, equal to, or greater than the second version:

If version1 > version2, we should return 1.
If version1 < version2, we should return -1.
If version1 === version2, we should return 0.
If either version number contains characters other than digits and the . character, we should return null.
Here is an example of version number ordering:

0.1 < 1 = 1.0 < 1.1 < 1.2 = 1.2.0.0 < 1.18.2 < 13.37


Understanding the Problem:
Input:
  Two strings representing a version number

Output:
  - -1, 0 or 1 depending on the comparison:
    - 1 if arg1 > arg2
    - 0 if arg1 === arg2
    - -1 if arg1 < arg2

Rules:
  Versions can be compared by the position of each number in the version number:
    1.2.3 is newer than 1.2.2

Examples / test cases:
compareVersions('0.1', '0.11') => -1
compareVersions('0.1', '0.1') => 0
compareVersions('0.2', '0.1') => 1
compareVersions('1.3.5', '1.3.4') => 1
compareVersions('1.3.5', '1.13.4') => -1
compareVersions('12.3.5', '1.13.4') => 1

Egde cases:
compareVersions('.5', '1') => null
compareVersions('5.', '1') => null
compareVersions('1..5', '1.5') => null
compareVersions('1.0.0', '1.0') => 0
compareVersions('1.0.', '1.0.5') => -1

Algorithm:
Iterate each 'version part'
  - if arg1 > arg2 return 1
  - if arg1 < arg2 return -1
return 0